---
layout: post
comments: true
title:  "Questions For 1dv022"
date:   2016-11-9 10:05:44
categories: studies
---

## What do you think of pre-compiling your CSS?

I think that pre-compiling the css is a great time investment in the long run. If you're creating what would be considered a simple and small site, you
might not really feel a difference. In that case, a pre-processor might even be redundant since you'll be done in an hour anyway. However, when creating
a bigger project you it's extremely tiring and annoying having to break the DRY-rule (Don't repeat yourself) over and over again.

Let's look at this example:

{% highlight css %}
body {
    background: green;
}
.button {
    background: green;
}
#wrapper {
    background: red;
}
ul li {
    font-size: 15px;
}
{% endhighlight %}

Here we can see some very basic CSS containing some classes and ID's. Green is acting as the websites primary color. Nothing tedious or annoying about this.. yet.

Let's compare it with how it would look if written in SASS:

{% highlight scss %}
$primaryColor: green;
body {
    background: $primaryColor;
}
.button {
    background: $primaryColor;
}
#wrapper {
    background: red;
}
ul {
    li {
        font-size: 15px;
    }
}
{% endhighlight %}

When looking and comparing these two, the first impression I would get if I knew nothing about pre-processors would be that it just complicates things. I mean, by
looking at the the snippets, the regular CSS looks shorter and more straight forward. However, what happens if your client (or you) wants to change the color scheme
in the middle of a really big project? You'll end up having to copy paste the same css row over and over again. Furthermore, what happens if your client (or you) decides
that the new color scheme isn't quite right either which means you have to change it again? You get the point. This is just one of many pros of using an CSS pre-processor.

This site's CSS was generated by the pre-processor named [Sass](http://sass-lang.com/). Some techniques used:

+ Variable declarations.
+ Nesting.
+ Partials.
+ Imports.

Below is a list of pros and cons of pre-processing CSS:

Pros:

+ Modularizations.

+ Easier to follow the "DRY" principle.

+ Nesting.

+ Variables.

+ Mixins.

+ Mathematical functions.

Cons:

+ If you want to use a pre-processor in a team project, everybody needs to know how to use one. If someone isn't familiar with it and starts editing the output css, it can cause
problems.

+ Can be a bit hard to learn, especially compared with regular CSS where the way of coding is a bit more straight forward. However, if you have previous experience with programming
you might find pre-processors way of creating CSS more logical, since you can use some syntax you're familiar with.

+ Since CSS is abstracted, this adds another step to updates and changes. This might also affect debugging.

    What do you think of pre-compiling your CSS?
        Compare to regular CSS
        Which techniques did you use?
        Pros and cons?

    What do you think of static site generators?
        What type of projects are they suitable for?

    What is robots.txt and how have you configure it for your site?

    What is humans.txt and how have you configure it for your site?

    How did you implements comments to blog posts
    What is Open Graph and how do you make use of it?









{% if page.comments %}
<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//carlv.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
{% endif %}

[jekyll]:      http://jekyllrb.com
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-help]: https://github.com/jekyll/jekyll-help
